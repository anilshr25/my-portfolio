name: Secure mTLS Health Check

on:
  workflow_dispatch:
    inputs:
      server-ip:
        description: "Target Server IP"
        required: true
        default: "139.59.34.252"
      healthcheck-endpoint:
        description: "Health Check Endpoint"
        required: false
        default: "/healthcheck"

jobs:
  healthcheck:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write  # Required for OIDC authentication
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure secure environment
        run: |
          # Decode certificates with strict validation
          echo "${{ secrets.CERT_PEM_B64 }}" | base64 -d > .secrets/client.crt
          echo "${{ secrets.KEY_PEM_B64 }}" | base64 -d > .secrets/client.key
          echo "${{ secrets.CA_PEM_B64 }}" | base64 -d > .secrets/ca.pem
      - name: Perform mTLS health check
        id: healthcheck
        run: |
          # Setup cleanup trap
          cleanup() {
            shred -u .secrets/client.key .secrets/client.crt .secrets/ca.pem
            rm -rf .secrets
          }
          trap cleanup EXIT
          
          # Configure parameters
          ENDPOINT="${INPUT_HEALTHCHECK_ENDPOINT:-/healthcheck}"
          FULL_URL="${{ inputs.protocol || 'https' }}://${{ inputs.server-ip }}${ENDPOINT}"
          
          echo "🔐 Performing mTLS health check to ${FULL_URL}"
          
          # Execute health check with advanced security
          STATUS=$(curl -sSI \
            --cert .secrets/client.crt \
            --key .secrets/client.key \
            --cacert .secrets/ca.pem \
            --connect-timeout 5 \
            --max-time 10 \
            --retry 0 \
            --tlsv1.3 \
            --http2 \
            -o /dev/null \
            -w "%{http_code}" \
            "${FULL_URL}" 2>&1 | tail -1 || echo "CURL_ERROR")
          
          # Handle results
          if [[ "$STATUS" =~ ^[0-9]+$ ]]; then
            if [ "$STATUS" -eq 200 ]; then
              echo "✅ Server is healthy (HTTP 200)"
              echo "status=success" >> $GITHUB_OUTPUT
            else
              echo "❌ Health check failed with HTTP $STATUS"
              echo "status=fail" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "🔥 Critical connection error: $STATUS"
            echo "status=error" >> $GITHUB_OUTPUT
            exit 2
          fi

      - name: Security cleanup
        if: always()
        run: |
          # Nuclear option for cleanup
          find .secrets -type f -exec shred -u {} + 2>/dev/null || true
          rm -rf .secrets
